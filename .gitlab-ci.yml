variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  JULIA_DEPOT_PATH: "${CI_PROJECT_DIR}/.julia"
  JL_IMAGE: "registry.gitlab.com/sosiristseng/docker-juliabook:latest"

stages:
  - update
  - build
  - deploy

cache:
  - key: julia-1.7
    paths:
      - .julia/artifacts
      - .julia/compiled
      - .julia/packages
  - key:
      files:
        - Manifest.toml
        # - requirements.txt
    paths:
      - docs/_build/.jupyter_cache

# GitLab CI: Auto dependency updates https://thacoon.com/posts/gitlab-ci-auto-dependency-update/
# `GIT_PUSH_TOKEN` CI/CD variable = personal access token (PAT) with write access
auto-update:
  image: ${JL_IMAGE}
  tags:
    - md705
  stage: update
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  script:
    - julia --color=yes --threads=auto --project=@. -e 'import Pkg; Pkg.update()'
    - |
      if [[ -n $(git status --porcelain) ]]; then
        echo "Commiting updates"
        NEW_BR=auto-update-$(date '+%Y-%m-%d-%H-%M-%S')
        git config --global user.name "${GITLAB_USER_NAME}"
        git config --global user.email "${GITLAB_USER_EMAIL}"
        git checkout -b ${NEW_BR}
        git add .
        git commit -m "${NEW_BR}"
        git push "https://${GITLAB_USER_NAME}:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" \
            -o merge_request.create \
            -o merge_request.target="${CI_DEFAULT_BRANCH}" \
            -o merge_request.merge_when_pipeline_succeeds \
            -o merge_request.remove_source_branch \
            -o merge_request.title="${NEW_BR}" \
            -o merge_request.label="automated update" \
            -o merge_request.assign="${GITLAB_USER_NAME}"
        exit;
      else
        echo "no change, nothing to commit"
      fi

build-website:
  image: ${JL_IMAGE}
  tags:
    - md705
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - JULIA_PROJECT="" julia --color=yes --threads=auto -e 'import Pkg; Pkg.add("IJulia"); Pkg.build("IJulia")'
    - julia --color=yes --threads=auto --project=@. -e 'import Pkg; Pkg.instantiate()'
    # Uncomment if you want parallel execution
    # - find docs -type f -name "*.ipynb" -print0 | parallel -0 -j2 jupyter nbconvert --to notebook --ExecutePreprocessor.timeout=600 --ExecutePreprocessor.kernel_name=julia-${JL_MAJOR} --execute --inplace {}
    - jupyter-book build docs
  artifacts:
    paths:
      - docs/_build/
    expire_in: 1 day

pages:
  stage: deploy
  image: ${JL_IMAGE}
  tags:
    - md705
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"
  script:
    - JULIA_PROJECT="" julia --color=yes --threads=auto -e 'import Pkg; Pkg.add("IJulia"); Pkg.build("IJulia")'
    - julia --color=yes --threads=auto --project=@. -e 'import Pkg; Pkg.instantiate()'
    - jupyter-book build docs
    - mv docs/_build/html public
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\|svg\|xml\)$' -exec gzip   -f -k {} \; || echo 'Gzip failed. Skipping...'
    - find public -type f -regex '.*\.\(htm\|html\|txt\|text\|js\|css\|svg\|xml\)$' -exec brotli -f -k {} \; || echo 'Brotli failed. Skipping...'
  artifacts:
    paths:
      - public
